using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Domain.Entities
{
    /// <summary>
    /// Base class for discount coupons
    /// </summary>
    public abstract class Coupon
    {
        /// <summary>
        /// The code for this coupon
        /// (auto-generated by default)
        /// </summary>
        public String Code { get; set; }

        /// <summary>
        /// When the coupon should start to be valid
        /// </summary>
        public String Type
        {
            get { return GetType().Name; }
        }

        public DateTime Start { get; set; }

        /// <summary>
        /// When the coupon should end
        /// Optional, can last forever
        /// </summary>
        public DateTime? End { get; set; }

        /// <summary>
        /// Which customers is this coupon valid for
        /// If coupon is for all customers it should be set to null
        /// </summary>

        // TODO: Q: Should this list be emptied?!
        public List<Customer> CustomersValidFor { get; set; }

        /// <summary>
        /// Which users have used this coupon
        /// </summary>

        // TODO: Q: Should CustomersValidFor be inserted here when used?!
        public List<Customer> CustomersUsedBy { get; set; }

        /// <summary>
        /// Max amount of times that a customer is allowed to use the coupon
        /// </summary>
        public int? UseLimit { get; set; }

        /// <summary>
        /// Boolean deciding if the coupon can be combined
        /// with other coupons
        /// </summary>
        public bool CanBeCombined { get; set; }

        /// <summary>
        /// Check if specified Cart is valid for this Coupon
        /// </summary>

        // TODO: Needs refactoring and tests
        public virtual bool IsValidFor(Cart cart)
        {
            // VERY MUCH NOT DRY
            if (CustomersValidFor.Any())
            {
                // Get customer by SSN
                var customer = CustomersValidFor.Find(cust => cust.SocialSecurityNumber == cart.Customer.SocialSecurityNumber);
                return customer != null ? customer.CouponUses < UseLimit && End >= DateTime.Now : false;
            }

            if (CustomersUsedBy.Any())
            {
                // Get customer by SSN
                var customer = CustomersUsedBy.Find(cust => cust.SocialSecurityNumber == cart.Customer.SocialSecurityNumber);
                return customer != null ? customer.CouponUses < UseLimit && End >= DateTime.Now : End >= DateTime.Now;
            }

            return End >= DateTime.Now;
        }
    }
}
